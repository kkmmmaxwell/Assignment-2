makeCacheMatrix
a <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
}
get<-function() x
setmatrix <- funtion(solve) m<<-solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix
getmatrix=getmatrix)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-funtion() X
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get
setmatrix=setmatrix
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-funtion() X
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get
setmatrix=setmatrix
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-funtion() X
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get
setmatrix=setmatrix
getmatrix=getmatrix)
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-funtion() X
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get
setmatrix=setmatrix
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeVector<- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set=set, get=get
setmean=setmean
getmean=getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(45)
makeCacheMatrix <- function(x = matrix()) {
inv = NULL
set = function(y) {
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
inv = x$getinv()
if(!is.null(inv)){
message("Getting Cached Data")
return(inv)
}
}
cacheSolve <- function(x, ...) {
inv = x$getinv()
if(!is.null(inv)){
message("Getting Cached Data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data, ...)
x$setinv(inv)
return(inv)
}
tes = function(mat){
temp = makeCacheMatrix(mat)
start.time = sys.time()
cacheSolve(temp)
dur = sys.time() - start.time
print(dur)
start.time = sys.time()
cacheSolve(temp)
dur = sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
matl = matrix(r, nrow=1000, ncol=1000)
tes(matl)
source('~/.active-rstudio-document')
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set = function(y) {
x <<- y
inverse = NULL
}
get <- function() x
setinverse <- function(inverse) inverse <<- inverse
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set = function(y) {
x <<- y
inverse = NULL
}
get <- function() x
setinverse <- function(inverse) inverse <<- inverse
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse
getinverse = getinverse)
}
source('~/.active-rstudio-document')
